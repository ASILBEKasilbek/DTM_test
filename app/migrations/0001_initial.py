# Generated by Django 5.2.3 on 2025-06-22 09:23

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('text', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='questions/')),
                ('difficulty', models.CharField(choices=[('easy', 'Oson'), ('medium', 'O‘rtacha'), ('hard', 'Qiyin')], default='medium', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('explanation', models.TextField(blank=True, help_text='To‘g‘ri javob izohi')),
            ],
        ),
        migrations.CreateModel(
            name='AnswerOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('label', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], max_length=1)),
                ('text', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='app.question')),
            ],
            options={
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['slug'], name='app_subject_slug_4c365d_idx')],
            },
        ),
        migrations.CreateModel(
            name='TestSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('score', models.FloatField(default=0.0)),
                ('randomized_question_ids', models.JSONField(blank=True, default=list)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_sessions', to='app.subject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('correct_answers', models.PositiveIntegerField()),
                ('total_questions', models.PositiveIntegerField()),
                ('percent', models.FloatField()),
                ('test_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='app.testsession')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField(blank=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='app.subject')),
            ],
            options={
                'ordering': ['subject', 'name'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='app.topic'),
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='app.question')),
                ('selected_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.answeroption')),
                ('test_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='app.testsession')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('bio', models.TextField(blank=True)),
                ('total_tests', models.PositiveIntegerField(default=0)),
                ('total_score', models.FloatField(default=0)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Kutilmoqda'), ('resolved', 'Hal qilingan')], default='pending', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'status'], name='app_feedbac_user_id_acf40b_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='answeroption',
            index=models.Index(fields=['question', 'label'], name='app_answero_questio_03c508_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='answeroption',
            unique_together={('question', 'label')},
        ),
        migrations.AddIndex(
            model_name='testsession',
            index=models.Index(fields=['user', 'subject', 'completed'], name='app_testses_user_id_151f50_idx'),
        ),
        migrations.AddIndex(
            model_name='result',
            index=models.Index(fields=['test_session'], name='app_result_test_se_39ac92_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['slug', 'subject'], name='app_topic_slug_d65e1b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topic',
            unique_together={('subject', 'name')},
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['topic', 'is_active'], name='app_questio_topic_i_980b67_idx'),
        ),
        migrations.AddIndex(
            model_name='useranswer',
            index=models.Index(fields=['test_session', 'question'], name='app_userans_test_se_54563a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='useranswer',
            unique_together={('test_session', 'question')},
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['user'], name='app_userpro_user_id_e70f3b_idx'),
        ),
    ]
